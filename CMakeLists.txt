cmake_minimum_required(VERSION 3.25)
project(crlib)

find_package(Vulkan COMPONENTS glslc REQUIRED)
find_program(glslc_executable NAMES glslc HINTS Vulkan::glslc)

set(CMAKE_CXX_STANDARD 23)
include(cmake/CPM.cmake)

enable_testing()

function(add_crproject)
    set(options LIBRARY EXECUTABLE GTEST CATCH2)
    set(oneValueArgs NAME DIRECTORY)
    set(multiValueArgs DEPENDENCIES)
    cmake_parse_arguments(PARSE_ARGV 0 "CR" "${options}" "${oneValueArgs}" "${multiValueArgs}")
    if (NOT CR_NAME)
        message(FATAL_ERROR "Must specify NAME")
    endif ()
    message(STATUS "Adding crlib project ${CR_NAME}")
    if (NOT CR_DIRECTORY)
        set(CR_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    endif ()

    file(GLOB_RECURSE sources ${CR_DIRECTORY}/src/*.cpp)
    file(GLOB_RECURSE headers ${CR_DIRECTORY}/include/*.hpp)
    file(GLOB_RECURSE tests ${CR_DIRECTORY}/test/*.cpp)
    if (CR_EXECUTABLE)
        add_executable(${CR_NAME} ${sources} ${headers})
    elseif (CR_LIBRARY)
        #if no sources, then it's a header only library
        if (sources)
            add_library(${CR_NAME} ${sources} ${headers})
        else ()
            add_library(${CR_NAME} INTERFACE)
        endif ()
    else ()
        message(FATAL_ERROR "Must specify either LIBRARY or EXECUTABLE")
    endif ()
    if (sources)
        target_include_directories(${CR_NAME} PUBLIC ${CR_DIRECTORY}/include PRIVATE ${CR_DIRECTORY}/src ${CR_DIRECTORY}/include/${CR_NAME})
    else ()
        target_include_directories(${CR_NAME} INTERFACE ${CR_DIRECTORY}/include)
    endif ()
    if (CR_DEPENDENCIES)
        target_link_libraries(${CR_NAME} PUBLIC ${CR_DEPENDENCIES})
    endif ()

    if (tests)
        add_executable(${CR_NAME}_tests ${tests})
        target_link_libraries(${CR_NAME}_tests ${CR_NAME})
        if (CR_GTEST)
            find_package(GTest REQUIRED)
            target_link_libraries(${CR_NAME}_tests gtest_main)
        elseif (CR_CATCH2)
            find_package(Catch2 REQUIRED)
            target_link_libraries(${CR_NAME}_tests Catch2::Catch2)
        endif ()
        add_test(NAME ${CR_NAME}_tests COMMAND ${CR_NAME}_tests)
    endif ()

    if (${CR_LIBRARY})
        file(GLOB examples ${CR_DIRECTORY}/example/*)
        foreach (example ${examples})
            get_filename_component(example_name ${example} NAME)
            file(GLOB_RECURSE example_sources ${example}/*.cpp)
            add_executable(${CR_NAME}_${example_name} ${example_sources})
            target_link_libraries(${CR_NAME}_${example_name} ${CR_NAME})
            target_include_directories(${CR_NAME}_${example_name} PRIVATE ${CR_DIRECTORY}/include PRIVATE ${CR_DIRECTORY})
        endforeach ()
    endif ()
endfunction()

add_subdirectory(crutil)
add_subdirectory(crmath)
add_subdirectory(crui)
add_subdirectory(crvulkan)